// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (price,book_id,user_id,total,status) VALUES (?, ?, ?, ?, ?) RETURNING id
`

type CreateOrderParams struct {
	Price  float64 `json:"price"`
	BookID int64   `json:"book_id"`
	UserID int64   `json:"user_id"`
	Total  int64   `json:"total"`
	Status string  `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.Price,
		arg.BookID,
		arg.UserID,
		arg.Total,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, price, total, status, title, email, created_at FROM v_orders WHERE id = ?
`

func (q *Queries) GetOrderById(ctx context.Context, id int64) (VOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i VOrder
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Total,
		&i.Status,
		&i.Title,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, price, book_id, user_id, status, created_at, updated_at, total FROM orders ORDER BY id LIMIT ? OFFSET ?
`

type ListOrdersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.BookID,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserOrders = `-- name: ListUserOrders :many
SELECT id, price, total, status, title, email, created_at FROM v_orders WHERE email = ? ORDER BY id LIMIT ? OFFSET ?
`

type ListUserOrdersParams struct {
	Email  string `json:"email"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) ListUserOrders(ctx context.Context, arg ListUserOrdersParams) ([]VOrder, error) {
	rows, err := q.db.QueryContext(ctx, listUserOrders, arg.Email, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VOrder{}
	for rows.Next() {
		var i VOrder
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Total,
			&i.Status,
			&i.Title,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders SET status = ? WHERE id = ?
`

type UpdateOrderStatusParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
