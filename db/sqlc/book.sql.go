// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: book.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (title,author,price,page_count) VALUES (?, ?, ?, ?) RETURNING id
`

type CreateBookParams struct {
	Title     string  `json:"title"`
	Author    string  `json:"author"`
	Price     float64 `json:"price"`
	PageCount int64   `json:"page_count"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Price,
		arg.PageCount,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, price, page_count, created_at, updated_at FROM books ORDER BY id LIMIT ? OFFSET ?
`

type ListBooksParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Price,
			&i.PageCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
